[gd_scene load_steps=27 format=3 uid="uid://iv3w3pu8flf7"]

[ext_resource type="Script" uid="uid://conukf4ick1q8" path="res://scripts/Card/Pack&Set/card_pack.gd" id="1_wo5bd"]
[ext_resource type="Texture2D" uid="uid://b3kh2qq6nboem" path="res://assets/misc_sprites/card_shine.png" id="2_o731e"]
[ext_resource type="Script" uid="uid://bs6cynon1r4yq" path="res://scripts/Card/Pack&Set/cardset_data.gd" id="3_2f5rk"]
[ext_resource type="Resource" uid="uid://cggiwamgd6hyw" path="res://Resources/CardSetData/Farm.tres" id="4_i8ods"]
[ext_resource type="Resource" uid="uid://casnoqtppk56" path="res://Resources/CardSetData/Housing.tres" id="5_raj77"]
[ext_resource type="Texture2D" uid="uid://dn6735uees2i1" path="res://assets/card_packs/dummy_card_pack.png" id="5_va8pk"]
[ext_resource type="Resource" uid="uid://cxf1ei6yfsbx5" path="res://Resources/CardSetData/Town Square.tres" id="6_piws8"]
[ext_resource type="Resource" uid="uid://b1661oftebeem" path="res://Resources/CardSetData/Worship.tres" id="7_j5qe6"]
[ext_resource type="Texture2D" uid="uid://imfgok6btu1v" path="res://assets/misc_sprites/check_normal.png" id="8_piws8"]
[ext_resource type="Texture2D" uid="uid://ct7bq5ehjgc2a" path="res://assets/misc_sprites/check_click.png" id="9_j5qe6"]
[ext_resource type="Texture2D" uid="uid://coprxc3q4806f" path="res://assets/misc_sprites/check_hover.png" id="10_6vscq"]
[ext_resource type="Texture2D" uid="uid://dnydcvxn06lih" path="res://assets/misc_sprites/cross_normal.png" id="11_u2vrp"]
[ext_resource type="Texture2D" uid="uid://dd4s3kj0v5qbw" path="res://assets/misc_sprites/cross_click.png" id="12_g5vyk"]
[ext_resource type="Texture2D" uid="uid://q7fh7por4v12" path="res://assets/card_packs/pack_outline.png" id="13_6vscq"]
[ext_resource type="Texture2D" uid="uid://py8js8sa5pvf" path="res://assets/misc_sprites/cross_hover.png" id="13_ntb6h"]

[sub_resource type="Shader" id="Shader_u2vrp"]
code = "shader_type canvas_item;

group_uniforms code_set_parameters;
uniform vec2 mouse_position;
uniform vec2 sprite_position;

uniform sampler2D dissolve_texture : source_color;
uniform float dissolve_value : hint_range(0,1);
uniform vec4 burn_color: source_color;

group_uniforms _3D_Perspective;
uniform float fov : hint_range(1, 179) = 90;
uniform bool cull_back = true;
uniform float inset : hint_range(0, 1) = 0.0;
uniform float max_tilt : hint_range(0,2.0) = 1.0;
uniform float max_distance = 500.0;

varying flat vec2 o;
varying vec3 p;

group_uniforms foil_uniforms;
//The color of the foil.
uniform vec3 foilcolor : source_color;
uniform float threshold : hint_range(0.0, 2.0, 0.1) = 0.1 ;
uniform float fuzziness : hint_range(0.0,1.0,.01) = 0.1;
uniform float period = 1;
uniform float scroll = 1;
uniform float normal_strength = .1;
uniform float effect_alpha_mult : hint_range(0,1) = 1.0;
uniform float direction : hint_range(0,1.0) = 0.5;

uniform sampler2D foil_mask;
uniform vec3 outline_color : source_color;
uniform sampler2D noise;
uniform sampler2D normal_map;

varying smooth vec2 direction_to;
varying smooth vec2 passthrough;

float inverse_lerp(float v, float a, float b){
	return (v - a) / (b - a);
}

float color_mask(vec3 mask, vec3 color, float mask_threshold, float mask_fuzziness){
	float d = distance(mask,color);
	return clamp(1.0 - smoothstep(mask_threshold,mask_threshold + mask_fuzziness, d),0.0,1.0);
}

mat2 rotate2d(float _angle){
    return mat2(vec2(cos(_angle),-sin(_angle)),vec2(sin(_angle),cos(_angle)));
}

vec3 rotate_vector(vec3 v, float angleX, float angleY, float magnitude) {
	// Create rotation matrices for X and Y axes.
	mat3 rotX = mat3(
		vec3(1.0, 0.0, 0.0),
		vec3(0.0, cos(angleX), -sin(angleX)),
		vec3(0.0, sin(angleX), cos(angleX))
	);
	mat3 rotY = mat3(
		vec3(cos(angleY), 0.0, sin(angleY)),
		vec3(0.0, 1.0, 0.0),
		vec3(-sin(angleY), 0.0, cos(angleY))
	);
	// Combine the rotations. Order matters! Y then X is common.
	mat3 combinedRotation = rotX * rotY; // Apply Y rotation first, then X.
	// Rotate the vector.
	vec3 rotatedVector = combinedRotation * v;
	// Apply magnitude
	rotatedVector = normalize(rotatedVector) * magnitude;
	return rotatedVector;
}

void vertex(){
	direction_to = mouse_position - sprite_position;
	float d = length( direction_to );
	float magnitude = min( max_tilt , d / max_distance);
	float angle = atan(direction_to.x,direction_to.y);
	float x_rota = abs(angle) / PI;
	float y_rota = abs(atan(direction_to.y,direction_to.x)) / PI;

	float sin_b = sin( (-y_rota + .5) * magnitude * (PI / 2.0) );
	float cos_b = cos( (-y_rota + .5) * magnitude * (PI / 2.0) );
	float sin_c = sin( (x_rota - .5) * magnitude * (PI / 2.0) );
	float cos_c = cos( (x_rota - .5) * magnitude * (PI / 2.0) );

	mat3 inv_rot_mat;
	inv_rot_mat[0][0] = cos_b;
	inv_rot_mat[0][1] = 0.0;
	inv_rot_mat[0][2] = -sin_b;

	inv_rot_mat[1][0] = sin_b * sin_c;
	inv_rot_mat[1][1] = cos_c;
	inv_rot_mat[1][2] = cos_b * sin_c;

	inv_rot_mat[2][0] = sin_b * cos_c;
	inv_rot_mat[2][1] = -sin_c;
	inv_rot_mat[2][2] = cos_b * cos_c;


	float t = tan(fov / 360.0 * PI);
	p = inv_rot_mat * vec3((UV - 0.5), 0.5 / t);
	float v = (0.5 / t) + 0.5;
	p.xy *= v * inv_rot_mat[2].z;
	o = v * inv_rot_mat[2].xy;

	VERTEX += (UV - 0.5) / TEXTURE_PIXEL_SIZE * t * (1.0 - inset);
}

void fragment() {
	//culls the back somehow
	if (cull_back && p.z <= 0.0) discard;
	//get the UV from based on the tilt from the vertex function
	vec2 uv = (p.xy / p.z).xy - o;
	vec2 adjusted_uv = uv + 0.5;
	//get the color texture
	vec4 albedo_tex = texture(TEXTURE, adjusted_uv);
	COLOR = albedo_tex;

	vec4 mask = texture(foil_mask,adjusted_uv);
	float texture_similarity = color_mask(foilcolor,albedo_tex.rgb,threshold,fuzziness);

	vec4 noise_texture = texture(dissolve_texture, UV);

	float d = length( direction_to );
	float magnitude = min( max_tilt , d / max_distance);
	float angle = atan(direction_to.x,direction_to.y);
	float x_rota = abs(angle) / PI;
	float y_rota = abs(atan(direction_to.y,direction_to.x)) / PI;

	vec3 normal_map_tex = texture(normal_map,adjusted_uv).rgb * 2.0 - 1.0;
	vec3 normal = rotate_vector(vec3(1.0,1.0,1.0),x_rota,y_rota,magnitude * magnitude);
	normal = rotate_vector(normal,normal_map_tex.x, normal_map_tex.y, length(normal_map_tex)) * normal_strength;

	vec4 noise_tex = texture(noise,adjusted_uv);

	vec4 gradient_tex = vec4(outline_color,1);
	float strength = effect_alpha_mult * mask.r * texture_similarity;

	float burn_threshold = smoothstep(noise_texture.x, noise_texture.x, dissolve_value);
	float border = smoothstep(noise_texture.x, noise_texture.x, dissolve_value);

	COLOR.rgb = mix(albedo_tex.rgb, gradient_tex.rgb*(noise_tex.rgb*2.0), strength);//(effect_alpha_mult-length(albedo_tex))*gradient_tex.a*effect_alpha_mult);
	COLOR.a *= burn_threshold;
	COLOR.a *= step(max(abs(uv.x), abs(uv.y)), 0.5);
	COLOR.rgb = mix(burn_color.rgb, COLOR.rgb, border);
	//COLOR.a *= threshold;
}"

[sub_resource type="FastNoiseLite" id="FastNoiseLite_j4ao5"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_b3b0l"]
noise = SubResource("FastNoiseLite_j4ao5")

[sub_resource type="FastNoiseLite" id="FastNoiseLite_b3b0l"]

[sub_resource type="NoiseTexture2D" id="NoiseTexture2D_pmi5y"]
noise = SubResource("FastNoiseLite_b3b0l")

[sub_resource type="ShaderMaterial" id="ShaderMaterial_ntb6h"]
resource_local_to_scene = true
shader = SubResource("Shader_u2vrp")
shader_parameter/mouse_position = Vector2(0, 0)
shader_parameter/sprite_position = Vector2(0, 0)
shader_parameter/dissolve_texture = SubResource("NoiseTexture2D_b3b0l")
shader_parameter/dissolve_value = 1.0
shader_parameter/burn_color = Color(0, 0, 0, 1)
shader_parameter/fov = 90.0
shader_parameter/cull_back = true
shader_parameter/inset = 0.0
shader_parameter/max_tilt = 0.035
shader_parameter/max_distance = 500.0
shader_parameter/foilcolor = Color(1, 0, 0, 1)
shader_parameter/threshold = 0.2
shader_parameter/fuzziness = 0.1
shader_parameter/period = 2.0
shader_parameter/scroll = 4.0
shader_parameter/normal_strength = 0.1
shader_parameter/effect_alpha_mult = 1.0
shader_parameter/direction = 0.5
shader_parameter/outline_color = Color(0.913725, 0.784314, 0.309804, 1)
shader_parameter/normal_map = SubResource("NoiseTexture2D_pmi5y")

[sub_resource type="RectangleShape2D" id="RectangleShape2D_q1uvj"]
size = Vector2(162, 231.5)

[sub_resource type="Animation" id="Animation_va8pk"]
length = 0.001
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Vector2(2, 2)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 1)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Area2D/CollisionShape2D:disabled")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/3/type = "value"
tracks/3/imported = false
tracks/3/enabled = true
tracks/3/path = NodePath(".:visible")
tracks/3/interp = 1
tracks/3/loop_wrap = true
tracks/3/keys = {
"times": PackedFloat32Array(0.001),
"transitions": PackedFloat32Array(1),
"update": 1,
"values": [true]
}
tracks/4/type = "value"
tracks/4/imported = false
tracks/4/enabled = true
tracks/4/path = NodePath(".:self_modulate")
tracks/4/interp = 1
tracks/4/loop_wrap = true
tracks/4/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [Color(1, 1, 1, 1)]
}
tracks/5/type = "value"
tracks/5/imported = false
tracks/5/enabled = true
tracks/5/path = NodePath("Sprite2D:rotation")
tracks/5/interp = 1
tracks/5/loop_wrap = true
tracks/5/keys = {
"times": PackedFloat32Array(0),
"transitions": PackedFloat32Array(1),
"update": 0,
"values": [0.0]
}

[sub_resource type="Animation" id="Animation_o731e"]
resource_name = "fall animation"
length = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath(".:scale")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.3),
"transitions": PackedFloat32Array(1.93187, 3.36358),
"update": 0,
"values": [Vector2(2, 2), Vector2(1, 1)]
}
tracks/1/type = "value"
tracks/1/imported = false
tracks/1/enabled = true
tracks/1/path = NodePath(".:modulate")
tracks/1/interp = 1
tracks/1/loop_wrap = true
tracks/1/keys = {
"times": PackedFloat32Array(0, 0.2),
"transitions": PackedFloat32Array(3.36358, 1),
"update": 0,
"values": [Color(1, 1, 1, 0), Color(1, 1, 1, 1)]
}
tracks/2/type = "value"
tracks/2/imported = false
tracks/2/enabled = true
tracks/2/path = NodePath("Area2D/CollisionShape2D:disabled")
tracks/2/interp = 1
tracks/2/loop_wrap = true
tracks/2/keys = {
"times": PackedFloat32Array(0, 0.3),
"transitions": PackedFloat32Array(1, 1),
"update": 1,
"values": [true, false]
}

[sub_resource type="Animation" id="Animation_6vscq"]
resource_name = "shake"
length = 0.3
tracks/0/type = "value"
tracks/0/imported = false
tracks/0/enabled = true
tracks/0/path = NodePath("Sprite2D:rotation")
tracks/0/interp = 1
tracks/0/loop_wrap = true
tracks/0/keys = {
"times": PackedFloat32Array(0, 0.0666667, 0.133333, 0.2, 0.266667, 0.3),
"transitions": PackedFloat32Array(0.63728, 0.517633, 0.406126, 0.554785, 0.5, 2.07053),
"update": 0,
"values": [0.0, 0.349066, -0.349066, 0.349066, -0.349066, 0.0]
}

[sub_resource type="AnimationLibrary" id="AnimationLibrary_gpkwg"]
_data = {
&"RESET": SubResource("Animation_va8pk"),
&"fall animation": SubResource("Animation_o731e"),
&"shake": SubResource("Animation_6vscq")
}

[node name="CardPack" type="Node2D"]
material = SubResource("ShaderMaterial_ntb6h")
scale = Vector2(2, 2)
script = ExtResource("1_wo5bd")
pack_sets = Array[ExtResource("3_2f5rk")]([ExtResource("4_i8ods"), ExtResource("5_raj77"), ExtResource("6_piws8"), ExtResource("7_j5qe6")])

[node name="Buttons" type="Control" parent="."]
visible = false
custom_minimum_size = Vector2(200, 60)
layout_mode = 3
anchors_preset = 0
offset_left = -100.0
offset_top = -201.13
offset_right = 100.0
offset_bottom = -116.275
metadata/_edit_use_anchors_ = true

[node name="MarginContainer" type="MarginContainer" parent="Buttons"]
layout_mode = 1
anchors_preset = 15
anchor_right = 1.0
anchor_bottom = 1.0
grow_horizontal = 2
grow_vertical = 2

[node name="HBoxContainer" type="HBoxContainer" parent="Buttons/MarginContainer"]
layout_mode = 2

[node name="YesButton" type="TextureButton" parent="Buttons/MarginContainer/HBoxContainer"]
custom_minimum_size = Vector2(70, 70)
layout_mode = 2
size_flags_horizontal = 3
focus_mode = 0
texture_normal = ExtResource("8_piws8")
texture_pressed = ExtResource("9_j5qe6")
texture_hover = ExtResource("10_6vscq")
stretch_mode = 3

[node name="NoButton" type="TextureButton" parent="Buttons/MarginContainer/HBoxContainer"]
layout_mode = 2
size_flags_horizontal = 3
focus_mode = 0
texture_normal = ExtResource("11_u2vrp")
texture_pressed = ExtResource("12_g5vyk")
texture_hover = ExtResource("13_ntb6h")
stretch_mode = 3

[node name="Outline" type="Sprite2D" parent="."]
use_parent_material = true
texture = ExtResource("13_6vscq")

[node name="Sprite2D" type="Sprite2D" parent="."]
use_parent_material = true
texture = ExtResource("5_va8pk")

[node name="ShineSprite" type="Sprite2D" parent="."]
self_modulate = Color(1, 1, 1, 0.223529)
use_parent_material = true
texture = ExtResource("2_o731e")

[node name="Area2D" type="Area2D" parent="."]
collision_layer = 8
collision_mask = 8

[node name="CollisionShape2D" type="CollisionShape2D" parent="Area2D"]
position = Vector2(0, -0.75)
shape = SubResource("RectangleShape2D_q1uvj")
disabled = true

[node name="AnimationPlayer" type="AnimationPlayer" parent="."]
libraries = {
&"": SubResource("AnimationLibrary_gpkwg")
}

[connection signal="pressed" from="Buttons/MarginContainer/HBoxContainer/YesButton" to="." method="_on_check_pressed"]
[connection signal="pressed" from="Buttons/MarginContainer/HBoxContainer/YesButton" to="." method="_on_yes_button_pressed"]
[connection signal="pressed" from="Buttons/MarginContainer/HBoxContainer/NoButton" to="." method="_on_cross_pressed"]
[connection signal="input_event" from="Area2D" to="." method="_on_area_2d_input_event"]
[connection signal="mouse_entered" from="Area2D" to="." method="_on_area_2d_mouse_entered"]
[connection signal="mouse_exited" from="Area2D" to="." method="_on_area_2d_mouse_exited"]
