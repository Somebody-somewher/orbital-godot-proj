[gd_scene load_steps=6 format=3 uid="uid://ctmxmab1ad1jc"]

[ext_resource type="Script" uid="uid://c0jn1x2wlrg2l" path="res://scripts/ProceduralGeneration/ProcGenUnitTester.gd" id="1_q7l6t"]
[ext_resource type="Script" uid="uid://cwgkuosbhxg8v" path="res://scripts/ProceduralGeneration/PostProcessors/ProcGenPostProcessBuildingInterface.gd" id="2_48sj1"]
[ext_resource type="Resource" uid="uid://pql73viwb0oq" path="res://Resources/ProcGen/ProcGenDesertForestToStone.tres" id="3_ri6a5"]

[sub_resource type="GDScript" id="GDScript_ifhyg"]
script/source = "extends ProceduralGenerator
class_name BuildingProceduralGenerator

# Actually noise map to generate the map
@export var noise_building_texture : NoiseTexture2D
@export var noise_building_freq : float

@export var building_noise_threshold : Array[float]
@export var building_ids : Array[String]
@export var terrain_conditions : Array[Array]

func set_up() -> void:
	super.set_up()
	if noise_building_texture == null:
		noise_building_texture = generate_noise_texture(0.9)

func assign_buildings(matrix : Array, board_id : int) -> void:
	assert(building_ids.size() >= building_noise_threshold.size())
	assert(building_ids.size() == terrain_conditions.size())
	if building_ids.size() > building_noise_threshold.size():
		printerr(\"Some Buildings tiles will not be generated\")
	
	var offset : Vector2i = getOffsetByBoardId(board_id) * board_size
	var noise = noise_building_texture.noise
	var noise_val
	for col in range(board_size.x):
		for row in range(board_size.y):
			noise_val = noise.get_noise_2d(offset.x + col, offset.y + row)
			matrix[col][row].append(map_noise_to_building(noise_val, matrix[col][row][0]))
			#print(noise_val, matrix[col][row])
			
func add_buildings(matrix : Array, create_build : Callable) -> void:			
	for col in range(board_size.x):
		for row in range(board_size.y):
			if matrix[col][row][1] != \"\":
				create_build.call(Vector2i(col,row), Building.new_building(matrix[col][row][1]))
			
	
func map_noise_to_building(noise_val : float, current_terrain : String) -> String:
	var i = 0;
	for level in building_noise_threshold:
		if noise_val <= level && current_terrain in terrain_conditions[i]:
			return building_ids[i]
		i += 1
			
	return \"\"
	
"

[sub_resource type="Resource" id="Resource_r1mx5"]
script = SubResource("GDScript_ifhyg")
noise_building_freq = 0.8
building_noise_threshold = Array[float]([-0.5, -0.45, -0.3, -0.2])
building_ids = Array[String](["mountain", "rock", "flower", "forest"])
terrain_conditions = Array[Array]([["Grass", "Desert"], ["Grass", "Desert"], ["Grass"], ["Grass", "Desert"]])
board_size = Vector2i(8, 8)
num_board = 4
terrain_noise_freq = 0.0583
terrain_noise_threshold = Array[float]([-0.2, 0.3, 0.7])
terrain_ids = Array[String](["Water", "Grass", "Desert"])
post_processors = Array[ExtResource("2_48sj1")]([ExtResource("3_ri6a5")])
metadata/_custom_type_script = "uid://poxoc1qxkqqm"

[node name="ProcGen" type="Node2D" node_paths=PackedStringArray("display_noise")]
script = ExtResource("1_q7l6t")
BOARD_SIZE = null
NUM_OF_BOARDS = null
gap_btwn_board = null
display_noise = NodePath("TextureRect")
proc_generator = SubResource("Resource_r1mx5")
board = null

[node name="Camera2D" type="Camera2D" parent="."]
position = Vector2(2463, 1385)
zoom = Vector2(0.325, 0.325)

[node name="TextureRect" type="TextureRect" parent="."]
offset_left = 4683.0
offset_top = 51.0
offset_right = 4866.0
offset_bottom = 218.0
